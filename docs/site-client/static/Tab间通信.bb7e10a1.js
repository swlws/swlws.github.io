var e={html:'<h1 id="一、场景">一、场景</h1>\n<p>Tab 间通信存在不同的场景：</p>\n<ul>\n<li>同源网站下的 Tab 页间通信</li>\n<li>非同源网站下的 Tab 页间通信</li>\n</ul>\n<h1 id="二、同源网站下-tab-页间的通信方式">二、同源网站下 Tab 页间的通信方式</h1>\n<p>按照通信的特征，分为三种方式点对点通信、广播通信、轮询通信</p>\n<ul>\n<li>点对点通信<ul>\n<li>window.postMessge</li></ul></li>\n<li>广播通信<ul>\n<li>BroadCast Channel</li>\n<li>Service Worker</li>\n<li>LocalStorage</li></ul></li>\n<li>轮询通信<ul>\n<li>IndexedDB</li></ul></li>\n</ul>\n<h2 id="21-windowpostmessge">2.1 window.postMessge</h2>\n<p>当使用 window.open 打开一个新页面时，若两个 Tab 之间需要主动通信，则可以使用<code>window.postMessage</code>实现通信。</p>\n<p>场景：在<code>A页面</code>使用<code>window.open</code>打开<code>B页面</code>，在<code>B页面</code>向<code>A页面</code>发送消息。</p>\n<p>特点：类似于点对点间的通信，其它的同源页面无法收到消息。</p>\n<p>原理：</p>\n<ul>\n<li>A 页面监听<code>message</code>事件</li>\n<li>B 页面使用<code>postMessage</code>发送消息</li>\n<li>B 页面可以获取 A 页面的 window 对象，一般使用 window.opener</li>\n</ul>\n<p>具体实现(<a href="https://github.com/swlws/swlws.github.io/blob/master/shared/tool/tab-message.ts">源码</a>)：</p>\n<p>A 页面监听消息</p>\n<pre><code class="ts language-ts">/**\n * 事件映射\n */\nconst eventMap: PlainObject = {};\n\nwindow.addEventListener(\'message\', (ev) =&gt; {\n  let { data } = ev;\n  if (Object.prototype.toString.call(data) !== \'[object Object]\') return;\n\n  let { key, args = [] } = data;\n  let fn = eventMap[key];\n  if (typeof fn === \'function\') {\n    if (!Array.isArray(args)) args = [args];\n    fn(...args);\n  }\n});\n\n/**\n * 注册Tab页事件\n *\n * @param key\n * @param fn\n */\nexport function registerTabEvent(key: string, fn: (...args: any[]) =&gt; void) {\n  eventMap[key] = fn;\n}</code></pre>\n<p>B 页面发送消息</p>\n<pre><code class="ts language-ts">type TMessage = { key: string; args?: any[] };\n/**\n * 发送消息\n *\n * @param data\n * @returns\n */\nexport function sendTabMessage(data: TMessage) {\n  let opener = window.opener;\n  if (!opener) return;\n\n  opener.postMessage(data, \'/\');\n}</code></pre>\n<h2 id="22-broadcast-channel">2.2 BroadCast Channel</h2>\n<p>BroadcastChannel 接口代理了一个命名频道，可以让指定 origin 下的任意 browsing context 来订阅它。它允许同源的不同浏览器窗口，Tab 页，frame 或者 iframe 下的不同文档之间相互通信。通过触发一个 message 事件，消息可以广播到所有监听了该频道的 BroadcastChannel 对象。</p>\n<p>特点：</p>\n<ul>\n<li>广播通信</li>\n</ul>\n<p>原理：</p>\n<ul>\n<li>页面创建<code>BroadCast Channel</code>实例</li>\n<li>为实例注册<code>message</code>事件</li>\n</ul>\n<p>实现：</p>\n<p><a href="https://swlws.github.io/site-client/#/tab-message-broadcast-channel">Demo</a></p>\n<pre><code class="js language-js">export default defineComponent({\n  setup() {\n    const instr = ref(\'\');\n    const outmsg = ref(\'\');\n\n    let bc = new BroadcastChannel(\'test\');\n    bc.onmessage = (ev) =&gt; {\n      outmsg.value = ev.data;\n    };\n\n    const sendMsg = () =&gt; {\n      bc.postMessage(instr.value);\n    };\n\n    return {\n      instr,\n      outmsg,\n      sendMsg,\n    };\n  },\n});</code></pre>\n<h2 id="23-service-worker">2.3 Service Worker</h2>\n<p>Service Worker 是一个运行在后台的 Worker，多页面间可以共享 Worker，使用 Worker 充当消息转发中心，实现多页面间的通信。</p>\n<p>原理：</p>\n<ul>\n<li>多 Tab 共用同一份 Service Worker，每一个 Tab 是为 Client，通过 Service Worker 向每一客户端推送消息实现通信</li>\n</ul>\n<p>实现：</p>\n<p><a href="https://swlws.github.io/site-client/#/tab-message-service-worker">Demo</a></p>\n<p>ServiceWorker 注册<code>message</code>事件</p>\n<pre><code class="js language-js">// ServiceWorkerGlobalScope上下文中注册message事件\n// 当监听到消息时，转发给每一个客户端\nself.addEventListener(\'message\', function (ev) {\n  ev.waitUntil(\n    self.clients.matchAll().then(function (clients) {\n      if (!clients || clients.length === 0) {\n        return;\n      }\n\n      // 向每一个客户端发送消息，包括自身\n      clients.forEach(function (client) {\n        client.postMessage(ev.data);\n      });\n    }),\n  );\n});</code></pre>\n<p>在客户端接收、发送消息</p>\n<pre><code class="js language-js">export default defineComponent({\n  setup() {\n    const instr = ref(\'\');\n    const outmsg = ref(\'\');\n\n    const sendMsg = () =&gt; {\n      if (\'serviceWorker\' in navigator) {\n        navigator.serviceWorker.controller?.postMessage(instr.value);\n      }\n    };\n\n    if (\'serviceWorker\' in navigator) {\n      navigator.serviceWorker.register(\'./tab-message.sw.js\').then((data) =&gt; {\n        console.log(\'Service Worker注册成功\');\n      });\n\n      navigator.serviceWorker.addEventListener(\'message\', (ev) =&gt; {\n        outmsg.value = ev.data;\n      });\n    } else {\n      console.log(\'浏览器不支持 serviceWorker\');\n    }\n\n    return {\n      instr,\n      outmsg,\n      sendMsg,\n    };\n  },\n});</code></pre>\n<h2 id="24-localstorage">2.4 LocalStorage</h2>\n<p>localstorage 可以存储浏览器数据，同源时，共享数据。当同源下的两个 Tab 页需要监听对方数据变化时，使用 localstorage 是比较好的方式。</p>\n<p>原理：</p>\n<ul>\n<li>两个 Tab 页同源</li>\n<li>A 页面监听<code>storage</code></li>\n<li>B 页面使用<code>setItem</code>更新数据时，此时 A 页面可以监听到<code>localstorage</code>数据的变化</li>\n</ul>\n<p>实现：</p>\n<pre><code class="js language-js">window.addEventListener(\'storage\', function (e) {\n  console.log(e.key, e.newValue);\n});</code></pre>\n<h2 id="25-indexeddb">2.5 IndexedDB</h2>\n<p>同源下的 Tab 可以访问相同的 IndexedDB，利用数据的全局存储特性，实现通信。</p>\n<p>原理：</p>\n<ul>\n<li>A 页面将数据存储到 IndexedDB 中</li>\n<li>B 页面轮询查询 IndexedDB 中数据的变化</li>\n</ul>\n<p>基于同样的原理，localstorage、sessionstorage 都可以采用这种方案</p>\n<h1 id="三、非同源页面间的通信">三、非同源页面间的通信</h1>\n<ul>\n<li>iframe</li>\n</ul>\n<h2 id="31-iframe">3.1 iframe</h2>\n<p>依靠 iframe 为媒介，可以实现非同源页面间的通信</p>',metadata:{},filename:"Tab间通信.md",path:"/Users/sunwenlong/Self/Code/10-MyGit/swlws.github.io/packages/site-client/src/views/menu/doc-list/md/Tab间通信.md"};export default e;
