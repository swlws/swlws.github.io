import{_ as a,E as t,c as h,J as l,w as n,a2 as s,o as e,a as p}from"./chunks/framework.aTtkxbT6.js";const q=JSON.parse('{"title":"性能优化总纲","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"date/202310/性能优化总纲.md","filePath":"date/202310/性能优化总纲.md"}'),k={name:"date/202310/性能优化总纲.md"},r=s(`<h1 id="性能优化总纲" tabindex="-1">性能优化总纲 <a class="header-anchor" href="#性能优化总纲" aria-label="Permalink to &quot;性能优化总纲&quot;">​</a></h1><p>本文仅论述优化的手段，不涉及执行这些操作的根因，后续空闲时在整理“为什么”。</p><h2 id="一、性能指标" tabindex="-1">一、性能指标 <a class="header-anchor" href="#一、性能指标" aria-label="Permalink to &quot;一、性能指标&quot;">​</a></h2><p>指标有很多，比如 lighthouse 中使用的指标有 FCP、LCP、TBT、CLS、Speed Index，这些是最终的性能评估指标。</p><p>性能优化方案落地时，主要参看的指标：</p><table><thead><tr><th>指标</th><th>名词解释</th><th>描述</th></tr></thead><tbody><tr><td>DCL [DOMContentLoaded]</td><td>DOM 解析结束时间</td><td>HTML 文档被解析成 DOM 树并且所有的标签都已经可用，但是外部资源（如图像、样式表等）可能还没有加载完成。</td></tr><tr><td>FP [First Pain]</td><td>首次绘制</td><td>浏览器首次将像素渲染到屏幕上的时间点，即页面第一次有可见的内容呈现给用户。</td></tr><tr><td>FCP [First Content Pain]</td><td>首次内容绘制</td><td>浏览器首次将第一个有意义的内容（如文本、图像、SVG 等）呈现到屏幕上的时间点。</td></tr><tr><td>LOAD</td><td>加载结束时间</td><td>在整个页面及其所有资源（包括图像、样式表、脚本等）加载完成后触发。</td></tr></tbody></table><h3 id="_1-指标对应的值的获取" tabindex="-1">（1）指标对应的值的获取 <a class="header-anchor" href="#_1-指标对应的值的获取" aria-label="Permalink to &quot;（1）指标对应的值的获取&quot;">​</a></h3><p>通过 Chrome 的 Performance 面板，可以看到大部分的值，这里说下如何通过 API 获取值。</p><p>1.1 DCL</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DCL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOMContentLoaded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DCL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>1.2 FP 与 FCP</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fcp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntriesByType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;paint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fpDuration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fp.startTime;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fcpDuration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fcp.startTime;</span></span></code></pre></div><p>1.3 Load</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loadDuration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.duration;</span></span></code></pre></div><h2 id="二、资源模块" tabindex="-1">二、资源模块 <a class="header-anchor" href="#二、资源模块" aria-label="Permalink to &quot;二、资源模块&quot;">​</a></h2><p>针对静态资源保持一个大体的优化思路，即在当前优先处理与当前页面相关的资源。</p><h3 id="_1-html-资源" tabindex="-1">（1）HTML 资源 <a class="header-anchor" href="#_1-html-资源" aria-label="Permalink to &quot;（1）HTML 资源&quot;">​</a></h3><p>下载过程中没有相关的处理</p><h3 id="_2-css-资源" tabindex="-1">（2）CSS 资源 <a class="header-anchor" href="#_2-css-资源" aria-label="Permalink to &quot;（2）CSS 资源&quot;">​</a></h3><h4 id="_2-1-减少字节" tabindex="-1">2.1 减少字节 <a class="header-anchor" href="#_2-1-减少字节" aria-label="Permalink to &quot;2.1 减少字节&quot;">​</a></h4><ul><li>CSS 简写。属性能够简写的，不要分开写</li><li>CSS 浅选择器。去除非必要的、详细的选择器，这是一个累活。</li></ul><h4 id="_2-2-移除未使用的-css" tabindex="-1">2.2 移除未使用的 CSS <a class="header-anchor" href="#_2-2-移除未使用的-css" aria-label="Permalink to &quot;2.2 移除未使用的 CSS&quot;">​</a></h4><p>一个复杂项目中可能会加载很多的 css 样式表，有些样式表不一定会被使用到，可以将这部分的样式去除。相关工具：</p><ul><li>uncss</li></ul><h4 id="_2-3-启用-gpu-渲染" tabindex="-1">2.3 启用 GPU 渲染 <a class="header-anchor" href="#_2-3-启用-gpu-渲染" aria-label="Permalink to &quot;2.3 启用 GPU 渲染&quot;">​</a></h4><p>针对变换、动画等场景，可以启用 GPU 渲染。方式：</p><ul><li>will-change</li></ul><h4 id="_2-4-import-问题" tabindex="-1">2.4 @import 问题 <a class="header-anchor" href="#_2-4-import-问题" aria-label="Permalink to &quot;2.4 @import 问题&quot;">​</a></h4><p>避免@import，其弊端：</p><ul><li>阻塞页面加载。当使用@import 导入外部样式表时，浏览器会在解析到@import 规则时暂停页面渲染，并立即请求导入的样式表</li><li>顺序依赖性。@import 导入的样式表必须在主样式表中等待导入样式表加载完毕后才能应用。</li><li>额外的 HTTP 请求。每次使用@import 导入样式表时，浏览器都需要发起额外的 HTTP 请求来获取该样式表</li><li>无法并行加载。由于@import 导入的样式表必须在主样式表中等待加载完毕后才能继续渲染，因此无法与主样式表并行加载。</li></ul><h3 id="_3-js-资源" tabindex="-1">（3）JS 资源 <a class="header-anchor" href="#_3-js-资源" aria-label="Permalink to &quot;（3）JS 资源&quot;">​</a></h3><h4 id="_3-1-资源处理" tabindex="-1">3.1 资源处理 <a class="header-anchor" href="#_3-1-资源处理" aria-label="Permalink to &quot;3.1 资源处理&quot;">​</a></h4><h5 id="压缩" tabindex="-1">压缩 <a class="header-anchor" href="#压缩" aria-label="Permalink to &quot;压缩&quot;">​</a></h5><p><code>压缩资源</code>，将多余的换行符、多余的打印等去除；</p><h5 id="丑化" tabindex="-1">丑化 <a class="header-anchor" href="#丑化" aria-label="Permalink to &quot;丑化&quot;">​</a></h5><p><code>丑化资源</code>，将代码中变量名、函数名等替换为简短的、难以阅读的代码。</p><h5 id="分包" tabindex="-1">分包 <a class="header-anchor" href="#分包" aria-label="Permalink to &quot;分包&quot;">​</a></h5><p>当个 JS 文件交大时，尝试执行分包处理。主流的构建工具都包含对应的处理方式：</p><ul><li>webpack <ul><li>dll。将第三方库按照一个的规则抽成一个或多个文件。</li><li>optimization <ul><li>externals。第三方库，以 umd 的方式引入工程。打包时不参与打包</li><li>splitChunks。按照一定的规则将包模块进行拆分。</li></ul></li></ul></li><li>rollup <ul><li>manualChunks。按照一定的规则将包模块进行拆分。</li></ul></li></ul><h4 id="_3-2-资源下载" tabindex="-1">3.2 资源下载 <a class="header-anchor" href="#_3-2-资源下载" aria-label="Permalink to &quot;3.2 资源下载&quot;">​</a></h4><ul><li>async。异步加载资源，下载完成后立即执行脚本</li><li>defer。异步加载资源，在 load 事件时执行脚本</li><li>preload。提前加载资源</li><li>prefetch。空闲时加载下一个页面需要使用的资源</li></ul><h3 id="_4-图片资源" tabindex="-1">（4）图片资源 <a class="header-anchor" href="#_4-图片资源" aria-label="Permalink to &quot;（4）图片资源&quot;">​</a></h3><h4 id="_4-1-图标" tabindex="-1">4.1 图标 <a class="header-anchor" href="#_4-1-图标" aria-label="Permalink to &quot;4.1 图标&quot;">​</a></h4><p>有段时间，雪碧图是一个很流行的图标整合方式。到了现在这个阶段，字体图标是一个更好的方案。比如：阿里字体图</p><h4 id="_4-2-格式选择" tabindex="-1">4.2 格式选择 <a class="header-anchor" href="#_4-2-格式选择" aria-label="Permalink to &quot;4.2 格式选择&quot;">​</a></h4><p>常用的图片格式有 png、jpg、svg、webp。图片可以按照多个维度进行划分，如下：</p><ul><li>无损图和有损图</li><li>光栅图和矢量图</li></ul><p><code>WebP</code>有 google 开发，旨在提供更高的压缩率和更高的图像质量，以替代传统的 JPEG、PNG 和 GIF 格式。<code>WebP</code>格式的特性：</p><ul><li>支持有损压缩和无损压缩</li><li>支持透明色</li><li>支持动态图</li><li>压缩率更高</li></ul><p>推荐使用<code>WebP</code>格式，主流浏览器厂商都已支持。</p><h4 id="_4-3-回退写法" tabindex="-1">4.3 回退写法 <a class="header-anchor" href="#_4-3-回退写法" aria-label="Permalink to &quot;4.3 回退写法&quot;">​</a></h4><p>为了保险起见，可以采用<code>&lt;picture&gt;</code>标签的回退语法确保正常显示。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">picture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> srcset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.webp&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/webp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> srcset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/jpeg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;图像&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">picture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="三、预加载" tabindex="-1">三、预加载 <a class="header-anchor" href="#三、预加载" aria-label="Permalink to &quot;三、预加载&quot;">​</a></h2><p>预加载分为几种类型，如：</p><h3 id="_1-网络处理" tabindex="-1">（1）网络处理 <a class="header-anchor" href="#_1-网络处理" aria-label="Permalink to &quot;（1）网络处理&quot;">​</a></h3><h4 id="dns-prefetch" tabindex="-1">dns-prefetch <a class="header-anchor" href="#dns-prefetch" aria-label="Permalink to &quot;dns-prefetch&quot;">​</a></h4><p>浏览器在用户浏览页面时，在后台运行 DNS 的解析</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dns-prefetch&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;//fonts.googleapis.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h4 id="preconnect" tabindex="-1">preconnect <a class="header-anchor" href="#preconnect" aria-label="Permalink to &quot;preconnect&quot;">​</a></h4><p>允许浏览器在一个 HTTP 请求正式发给服务器前预先执行一些操作，这包括 DNS 解析，TLS 协商，TCP 握手，这消除了往返延迟并为用户节省了时间。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.domain.com&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preconnect&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> crossorigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h3 id="_2-资源预加载" tabindex="-1">（2）资源预加载 <a class="header-anchor" href="#_2-资源预加载" aria-label="Permalink to &quot;（2）资源预加载&quot;">​</a></h3><p>在浏览器空闲时，加载站点将来可能用到的资源。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 图片 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prefetch&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/uploads/images/pic.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 样式表 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;styles.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 脚本 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jQuery.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h2 id="四、懒加载" tabindex="-1">四、懒加载 <a class="header-anchor" href="#四、懒加载" aria-label="Permalink to &quot;四、懒加载&quot;">​</a></h2><h3 id="_1-图片懒加载" tabindex="-1">（1）图片懒加载 <a class="header-anchor" href="#_1-图片懒加载" aria-label="Permalink to &quot;（1）图片懒加载&quot;">​</a></h3><p>当资源出现在可视区时，再加载资源。实现方式，基于<code>IntersectionObserve</code> + <code>src 替换</code>的思路实现。</p><h3 id="_2-路由懒加载" tabindex="-1">（2）路由懒加载 <a class="header-anchor" href="#_2-路由懒加载" aria-label="Permalink to &quot;（2）路由懒加载&quot;">​</a></h3><p>现代工程，大多是 SPA 工程，路由是有前端控制，当路由变化时再加载对应的资源很有必要。</p><h4 id="_2-1-vue-工程" tabindex="-1">2.1 Vue 工程 <a class="header-anchor" href="#_2-1-vue-工程" aria-label="Permalink to &quot;2.1 Vue 工程&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Home</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./components/Home.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> About</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./components/About.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, component: Home },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/about&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, component: About },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="_2-2-react-工程" tabindex="-1">2.2 React 工程 <a class="header-anchor" href="#_2-2-react-工程" aria-label="Permalink to &quot;2.2 React 工程&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Home</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./components/Home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> About</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./components/About&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Suspense</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Loading...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exact</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{Home} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/about&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{About} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App;</span></span></code></pre></div><h2 id="五、网络模块" tabindex="-1">五、网络模块 <a class="header-anchor" href="#五、网络模块" aria-label="Permalink to &quot;五、网络模块&quot;">​</a></h2><h3 id="_1-cdn" tabindex="-1">（1）CDN <a class="header-anchor" href="#_1-cdn" aria-label="Permalink to &quot;（1）CDN&quot;">​</a></h3><p>启用 CDN 网络，减少资源的加载时长。比如：腾讯桶</p><h3 id="_2-压缩" tabindex="-1">（2）压缩 <a class="header-anchor" href="#_2-压缩" aria-label="Permalink to &quot;（2）压缩&quot;">​</a></h3><p>请求传输的压缩算法，常用的有：</p><ul><li>GZIP。一种常用的压缩算法，它基于 DEFLATE 算法</li><li>Brotli。由谷歌开发，与 GZIP 和 Deflate 相比，Brotli 具有更高的压缩率。</li></ul>`,80),d=s('<blockquote><p>存在无损的 PNG 资源时，不要启用 GZIP。否则会起到反效果，导致压缩后的文件更大</p></blockquote><h3 id="_3-http" tabindex="-1">（3）HTTP <a class="header-anchor" href="#_3-http" aria-label="Permalink to &quot;（3）HTTP&quot;">​</a></h3><p>升级为 HTTP/2，好处：</p><ul><li>提供成本更低的请求 <ul><li>一套新的传输体系。连接-&gt;流-&gt;消息-&gt;帧</li><li>HTTP/2，一个连接，处理多个请求</li></ul></li><li>头部压缩。 <ul><li>采用索引的思路，对相同的 header 值只用引用</li></ul></li><li>服务器推送</li></ul><h2 id="六、总结" tabindex="-1">六、总结 <a class="header-anchor" href="#六、总结" aria-label="Permalink to &quot;六、总结&quot;">​</a></h2><p>性能优化，名词高大上，真正落地时会发现都是些基本功。</p><p>方法很简单，重要的是要知道为什么要这么做，空闲时再聊这块。</p>',7);function E(o,g,c,y,u,F){const i=t("font");return e(),h("div",null,[r,l(i,{color:"red"},{default:n(()=>[p("备注：")]),_:1}),d])}const b=a(k,[["render",E]]);export{q as __pageData,b as default};
