import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.BNFXvbzm.js";const g=JSON.parse('{"title":"lit","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"date/202305/lit_生命周期.md","filePath":"date/202305/lit_生命周期.md","lastUpdated":1708846230000}'),e={name:"date/202305/lit_生命周期.md"},l=t(`<h1 id="lit" tabindex="-1">lit <a class="header-anchor" href="#lit" aria-label="Permalink to &quot;lit&quot;">​</a></h1><h2 id="一、lit-是什么" tabindex="-1">一、lit 是什么 <a class="header-anchor" href="#一、lit-是什么" aria-label="Permalink to &quot;一、lit 是什么&quot;">​</a></h2><p><code>lit</code>提供了一种方式, 可以更快\\更轻量的创建一个<code>web component</code>. 在原生的<code>web component</code>的基础上, <code>lit</code>提供了更友好的响应式生命\\局部样式书写方式.</p><p><code>web compoent</code>的生成使用<code>lit</code>实现, 具体的 UI 实现可以使用不同的技术栈(vue react angular 等)</p><h2 id="二、lit-与-web-component" tabindex="-1">二、lit 与 web component <a class="header-anchor" href="#二、lit-与-web-component" aria-label="Permalink to &quot;二、lit 与 web component&quot;">​</a></h2><table><thead><tr><th></th><th>原生 web component</th><th>lit</th></tr></thead><tbody><tr><td>响应式声明</td><td>不支持</td><td>支持</td></tr><tr><td>样式隔离</td><td>支持</td><td>支持</td></tr><tr><td>渲染</td><td>attachShadow</td><td>render</td></tr><tr><td>生命周期</td><td>connectedCallback disconnectedCallback adoptedCallback attributeChangedCallback</td><td>connectedcallback disconnectedcallback attributechangedcallback adoptedcallback</td></tr><tr><td>响应式更新</td><td>-</td><td>shouldUpdate willUpdae update</td></tr><tr><td>主动触发更新</td><td>-</td><td>haschanged requestUpdate</td></tr></tbody></table><h2 id="三、生命周期" tabindex="-1">三、生命周期 <a class="header-anchor" href="#三、生命周期" aria-label="Permalink to &quot;三、生命周期&quot;">​</a></h2><ul><li>connectedCallback <ul><li>当 DOM 从 Document 文档移除时触发</li></ul></li><li>disconnectedCallback <ul><li>当 DOM 挂载到 Document 文档时触发</li></ul></li><li>shouldUpdate <ul><li>是否允许更新</li></ul></li><li>willUpdate <ul><li>即将更新, 允许对响应式属性做调整</li></ul></li><li>update <ul><li>执行更新</li></ul></li></ul><p>父子组件之间生命周期的行为:</p><ul><li>第一次 DOM 挂载时: 父 connectedCallback -&gt; 子 connectedCallback -&gt; 父 update(shouldUpdate willUpdate update) -&gt; 父 update(shouldUpdate willUpdate update)</li><li>第二次 DOM 挂载时: 父 connectedCallback -&gt; 子 connectedCallback</li><li>更新时: 父节点更新时, 不会影响子节点更新. 即仅触发父 update(shouldUpdate willUpdate update)</li><li>DOM 卸载时: 父 disconnectedCallback -&gt; 子 disconnectedCallback</li></ul><h2 id="四、lit-vue" tabindex="-1">四、lit + vue <a class="header-anchor" href="#四、lit-vue" aria-label="Permalink to &quot;四、lit + vue&quot;">​</a></h2><p>首先需要先创建一个 VUE 实例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: HTMLDivElement;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createVueComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &lt;div&gt;vue component&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(component);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.container);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>善用三个生命周期<code>connectedcallback disconnectedcallback update</code>, 通过<code>update</code>动态更新<code>vue 实例</code>.</p><p>第一次<code>connectedcallback</code>之后会触发<code>update</code>钩子, 此时<code>container</code>已被赋值, 可以执行<code>createVueComponent</code>.</p><div class="language-TS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">protected </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( changedProperties: PropertyValueMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PropertyKey, unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(changedProperties);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.container) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      unmountInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createVueComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h2 id="五、code" tabindex="-1">五、Code <a class="header-anchor" href="#五、code" aria-label="Permalink to &quot;五、Code&quot;">​</a></h2><p><a href="https://github.com/swlws/ui-demo/blob/master/projects/lit-ts/src/components/s-vue-component/index.ts" target="_blank" rel="noreferrer">Code 完整示例</a></p><h2 id="六、reference" tabindex="-1">六、Reference <a class="header-anchor" href="#六、reference" aria-label="Permalink to &quot;六、Reference&quot;">​</a></h2><ul><li>[^1] <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM" target="_blank" rel="noreferrer">web component</a></li><li>[^2] <a href="https://lit.dev/docs/components/lifecycle/" target="_blank" rel="noreferrer">lit lifecucle</a></li><li>[^3] <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events" target="_blank" rel="noreferrer">dispatch CustomEvent</a></li></ul>`,20),n=[l];function h(p,d,k,r,c,o){return a(),i("div",null,n)}const u=s(e,[["render",h]]);export{g as __pageData,u as default};
