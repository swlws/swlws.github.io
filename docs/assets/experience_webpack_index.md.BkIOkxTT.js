import{_ as a,c as s,o as e,a2 as i}from"./chunks/framework.aTtkxbT6.js";const u=JSON.parse('{"title":"Webpack 系列","description":"","frontmatter":{},"headers":[],"relativePath":"experience/webpack/index.md","filePath":"experience/webpack/index.md"}'),l={name:"experience/webpack/index.md"},n=i(`<h1 id="webpack-系列" tabindex="-1">Webpack 系列 <a class="header-anchor" href="#webpack-系列" aria-label="Permalink to &quot;Webpack 系列&quot;">​</a></h1><h2 id="动态导入的问题" tabindex="-1">动态导入的问题 <a class="header-anchor" href="#动态导入的问题" aria-label="Permalink to &quot;动态导入的问题&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第一种写法，Webpack 会发出报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> moduleName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/src/components/HelloWorld.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(moduleName)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第二种写法，webpack 执行正常</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> moduleName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;HelloWorld&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`@/src/components/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">moduleName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.vue\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在Webpack中，<code>import() 函数</code>是用来<code>动态加载</code>模块的，但是在使用动态导入时，Webpack 需要在<code>编译时</code>就知道要加载的模块路径。</p><p>在第一个代码示例中，moduleName 是一个变量，Webpack 在<code>编译时</code>无法确定 moduleName 的值是什么，因此无法静态分析模块路径，这就导致了报错。</p><p>在第二个代码示例中，moduleName 是一个字符串，Webpack 在<code>编译时</code>可以通过<code>字符串插值</code>确定模块路径，因此不会报错。</p><h2 id="url-loader" tabindex="-1">url-loader <a class="header-anchor" href="#url-loader" aria-label="Permalink to &quot;url-loader&quot;">​</a></h2><p>webpack 中导入图片时，当图片小于 1 Kb 时，<code>url-loader</code> 会将图片转为 base64</p><p>这种策略的目的，性能优化，减少 HTTP 次数</p><p>默认值是 1 Kb, 可以通过配置参数，增大阈值，或者配置为 -1 ，不启用此策略</p><p>webpack url-loader: <a href="https://v4.webpack.docschina.org/loaders/url-loader/#limit" target="_blank" rel="noreferrer">https://v4.webpack.docschina.org/loaders/url-loader/#limit</a></p>`,11),p=[n];function t(r,o,d,h,c,k){return e(),s("div",null,p)}const b=a(l,[["render",t]]);export{u as __pageData,b as default};
