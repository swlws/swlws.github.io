import{_ as i,c as s,o as a,a2 as t}from"./chunks/framework.aTtkxbT6.js";const c=JSON.parse('{"title":"性能","description":"","frontmatter":{},"headers":[],"relativePath":"experience/performance/index.md","filePath":"experience/performance/index.md"}'),l={name:"experience/performance/index.md"},n=t(`<h1 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h1><h2 id="当浏览器输入一个-url-会发生什么" tabindex="-1">当浏览器输入一个 URL, 会发生什么？ <a class="header-anchor" href="#当浏览器输入一个-url-会发生什么" aria-label="Permalink to &quot;当浏览器输入一个 URL, 会发生什么？&quot;">​</a></h2><p>为什么会问这个问题？主要考察：</p><ol><li>页面渲染流程</li><li>页面首屏优化</li></ol><p>当浏览器输入一个URL,会发生什么?</p><ul><li>URL解析,包括协议(如http)、域名、端口、路径和参数等</li><li>处理缓存,包括强缓存,协商缓存命中等</li><li>dns解析,解析域名,获取ip地址</li><li>建立链接,请求服务器资源,Nginx,CLB,CDN等</li><li>处理响应,资源的加载顺序,资源阻塞等</li><li>构建Dom树,CSS树,渲染页面,js执行等</li></ul><p>上面url的加载过程,其实就是我们可以优化的过程,比如:</p><ol><li>dns解析慢,我们可以找运维更换dns解析服务商</li><li>缓存不生效,我们可以调整缓存策略</li><li>部分地区网络慢,我们可以上cdn</li><li>资源加载慢,处理响应慢,我们可以拆包,gzip压缩,优化资源加载顺序,上http2</li><li>页面渲染慢,减少dom树层级,减少css选择器复杂度,减少js执行时间</li></ol><h2 id="性能指标" tabindex="-1">性能指标 <a class="header-anchor" href="#性能指标" aria-label="Permalink to &quot;性能指标&quot;">​</a></h2><h3 id="加载性能指标" tabindex="-1">加载性能指标 <a class="header-anchor" href="#加载性能指标" aria-label="Permalink to &quot;加载性能指标&quot;">​</a></h3><ul><li>DCL（DOMContentLoaded），DOM解析完毕，不包含css、图像和子框架的完成加载。</li><li>load（Onload Event），它代表页面中依赖的所有资源加载完的事件。</li><li>FP（First Paint），表示渲染出第一个像素点。FP一般在HTML解析完成或者解析一部分时候触发。</li><li>FCP（First Contentful Paint），表示渲染出第一个内容，这里的“内容”可以是文本、图片、canvas。</li><li>FMP（First Meaningful Paint），首次渲染有意义的内容的时间，“有意义”没有一个标准的定义，FMP的计算方法也很复杂。</li><li>LCP（largest contentful Paint），最大内容渲染时间。</li><li>INP （Interaction to Next Paint），与下一次绘制的交互。</li></ul><h4 id="dcl" tabindex="-1">DCL <a class="header-anchor" href="#dcl" aria-label="Permalink to &quot;DCL&quot;">​</a></h4><p>DOMContentLoaded 事件，当 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，无需等待样式表、图像和子框架的完成加载。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addeventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOMContentLoaded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dclTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.domContentLoadedEventEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.domContentLoadedEventStart</span></span></code></pre></div><h4 id="load-事件" tabindex="-1">load 事件 <a class="header-anchor" href="#load-事件" aria-label="Permalink to &quot;load 事件&quot;">​</a></h4><p>onload Event 代表页面中依赖的所有资源：DOM、图片、CSS、Flash等都加载完，window.onload注册的回调就会在load事件触发时候被调用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loadTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.loadEventEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.loadEventStart;</span></span></code></pre></div><h4 id="lcp" tabindex="-1">LCP <a class="header-anchor" href="#lcp" aria-label="Permalink to &quot;LCP&quot;">​</a></h4><p>最大内容绘制时间，用于记录视窗内最大的元素绘制的时间，该时间会随着页面渲染变化而变化，因为页面中的最大元素在渲染过程中可能会发生改变，另外该指标会在用户第一次交互后停止记录。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entryList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entryList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;LCP candidate:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, entry.startTime, entry);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;largest-contentful-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, buffered: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="fp-和-fcp" tabindex="-1">FP 和 FCP <a class="header-anchor" href="#fp-和-fcp" aria-label="Permalink to &quot;FP 和 FCP&quot;">​</a></h4><p>浏览器渲染的界面可能是“内容”，例如文本，也可能不是“内容”，比如一个背景为红色的div标签。</p><p>FCP 事件指渲染出第一个内容的事件,而 FP 指渲染出第一个像素点，渲染出的东西可能是内容，也可能不是</p><p>有节点不一定有渲染，如果没有任何样式，是没有界面的，也不需要渲染。下面代码就没有FP事件：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;no FP&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>下面代码，会渲染界面，因此会触发FP事件，但是不会触发FCP，因为没有内容。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;has FP, no FCP&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="tti-time-to-interactive" tabindex="-1">TTI（Time to Interactive） <a class="header-anchor" href="#tti-time-to-interactive" aria-label="Permalink to &quot;TTI（Time to Interactive）&quot;">​</a></h4><p>可交互时间。这个指标计算过程略微复杂，它需要满足以下几个条件：</p><p>1.从 FCP 指标后开始计算； 2.持续 5 秒内无长任务（执行时间超过 50 ms）且无两个以上正在进行中的 GET 请求； 3.往前回溯至 5 秒前的最后一个长任务结束的时间。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeToInteractive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.domInteractive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing.fetchStart</span></span></code></pre></div><h4 id="fid-first-input-delay" tabindex="-1">FID（First Input Delay） <a class="header-anchor" href="#fid-first-input-delay" aria-label="Permalink to &quot;FID（First Input Delay）&quot;">​</a></h4><p>首次输入延迟时间，记录在 FCP 和 TTI 之间用户首次与页面交互时响应的延迟。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, entry.processingStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.startTime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;first-input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, buffer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="inp-interaction-to-next-paint" tabindex="-1"><a href="https://juejin.cn/post/7267436042507091979" target="_blank" rel="noreferrer">INP（Interaction to Next Paint）</a> <a class="header-anchor" href="#inp-interaction-to-next-paint" aria-label="Permalink to &quot;[INP（Interaction to Next Paint）](https://juejin.cn/post/7267436042507091979)&quot;">​</a></h4><h3 id="白屏和首屏" tabindex="-1">白屏和首屏 <a class="header-anchor" href="#白屏和首屏" aria-label="Permalink to &quot;白屏和首屏&quot;">​</a></h3><p>白屏时间 = 地址栏输入网址后回车 - 浏览器出现第一个元素</p><p>白屏结束时间 = FP事件触发时间</p><p>首屏时间 = 地址栏输入网址后回车 - 浏览器第一屏渲染完成</p><p>首屏结束时间 = FCP事件触发时间 或 FMP、LCP</p><h3 id="performance-timing" tabindex="-1">performance.timing <a class="header-anchor" href="#performance-timing" aria-label="Permalink to &quot;performance.timing&quot;">​</a></h3><ul><li>重定向时间：redirectEnd - redirectStart</li><li>页面加载耗时：loadEventEnd - navigationStart</li><li>DNS查询耗时：domainLookupEnd - domainLookupStart</li><li>TCP链接耗时：connectEnd - connectStart</li><li>request请求耗时：responseEnd - responseStart</li><li>解析dom树耗时：domComplete - domInteractive</li><li>白屏时间：domloading - fetchStart</li><li>domready可操作时间：domContentLoadedEventEnd - fetchStart</li><li>onload总下载时间：loadEventEnd - fetchStart</li></ul><h2 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h2><p>强缓存和协商缓存</p><ul><li>Expires <ul><li>Last-Modified / If-Modified-Since</li></ul></li><li>Cache-Control <ul><li>ETag / If-None-Match</li></ul></li></ul><p>缓存位置</p><ul><li>from memory cahce. 浏览器会在js和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取(from memory cache)</li><li>from disk cache. css文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存(from disk cache)。</li></ul><h2 id="回流与重绘" tabindex="-1">回流与重绘 <a class="header-anchor" href="#回流与重绘" aria-label="Permalink to &quot;回流与重绘&quot;">​</a></h2><ul><li>回流：当涉及到DOM节点的布局属性发生变化时，就会重新计算该属性，浏览器会重新描绘相应的元素，此过程叫Reflow（回流或重排）</li><li>重绘：当影响DOM元素可见性的属性发生变化 (如 color) 时, 浏览器会重新描绘相应的元素, 此过程称为Repaint（重绘）。因此重排必然会引起重绘。</li></ul><p>优化方向：</p><ul><li>避免逐条更改样式。建议集中修改样式，例如操作className。</li><li>避免频繁操作DOM。创建一个documentFragment或div，在它上面应用所有DOM操作，最后添加到文档里。设置display:none的元素上操作，最后显示出来。</li><li>避免频繁读取元素几何属性（例如scrollTop）。绝对定位具有复杂动画的元素。</li><li>绝对定位使它脱离文档流，避免引起父元素及后续元素大量的回流</li></ul><h2 id="节流与防抖" tabindex="-1">节流与防抖 <a class="header-anchor" href="#节流与防抖" aria-label="Permalink to &quot;节流与防抖&quot;">​</a></h2><ul><li>节流（Throttling） <ul><li>定义：指在一段时间内只允许某个函数执行一次，即使在这段时间内该函数被多次触发。</li><li>作用：它的目的在于限制函数的调用频率。</li></ul></li><li>防抖（Debouncing） <ul><li>定义：指在事件被触发后，等待一段时间再执行，如果在这段时间内事件再次被触发，则重新计时。</li><li>目的：它的目的在于减少高频率事件触发时的函数执行次数。</li></ul></li></ul><h2 id="文件加载" tabindex="-1">文件加载 <a class="header-anchor" href="#文件加载" aria-label="Permalink to &quot;文件加载&quot;">​</a></h2><h3 id="把-link-放在-head-中" tabindex="-1">把<code>&lt;link&gt;</code>放在<code>&lt;head&gt;</code>中 <a class="header-anchor" href="#把-link-放在-head-中" aria-label="Permalink to &quot;把\`&lt;link&gt;\`放在\`&lt;head&gt;\`中&quot;">​</a></h3><p>这种做法可以让页面逐步呈现，提高了用户体验。将样式表放在文档底部附近，会使许多浏览器（包括 Internet Explorer）不能逐步呈现页面。一些浏览器会阻止渲染，以避免在页面样式发生变化时，重新绘制页面中的元素。这种做法可以防止呈现给用户空白的页面或没有样式的内容。</p><p><strong>PS</strong>：等待加载 CSS 不会阻塞 DOM 的解析，但会阻塞 DOM 渲染。另外，它也会阻塞 JavaScript，因为 JavaScript 经常用于查询元素的 CSS 属性。</p><h3 id="把-script-标签恰好放在-body-之前" tabindex="-1">把<code>&lt;script&gt;</code>标签恰好放在<code>&lt;/body&gt;</code>之前 <a class="header-anchor" href="#把-script-标签恰好放在-body-之前" aria-label="Permalink to &quot;把\`&lt;script&gt;\`标签恰好放在\`&lt;/body&gt;\`之前&quot;">​</a></h3><p>脚本在下载和执行期间会阻止 HTML 解析。把<code>&lt;script&gt;</code>标签放在底部，保证 HTML 首先完成解析，将页面尽早呈现给用户。</p><p>如果一定要放在 <code>&lt;head&gt;</code> 中，可以让 <code>&lt;script&gt;</code> 标签使用 <code>defer</code> 属性。</p><h3 id="defer、async、perfetch、perload" tabindex="-1">defer、async、perfetch、perload <a class="header-anchor" href="#defer、async、perfetch、perload" aria-label="Permalink to &quot;defer、async、perfetch、perload&quot;">​</a></h3><ul><li>defer：脚本异步加载，HTML 解析完成后按顺序执行。</li><li>async：脚本异步加载，加载完成后立即执行，执行顺序不保证。</li><li>prefetch：在浏览器空闲时预取未来可能需要的资源，低优先级。</li><li>preload：提前加载当前页面需要的关键资源，高优先级。</li></ul><h2 id="web-存储" tabindex="-1">Web 存储 <a class="header-anchor" href="#web-存储" aria-label="Permalink to &quot;Web 存储&quot;">​</a></h2><ul><li>LocalStorage <ul><li>最大值：主流浏览器，大约 5 MB</li></ul></li><li>SessionStroage</li><li>Cookie <ul><li>会话 Cookie（Session Cookie） <ul><li>会话 Cookie 是指没有指定过期时间的 Cookie，它的生命周期只在当前会话期间有效。一旦用户关闭浏览器，这类 Cookie 就会被删除。</li></ul></li><li>持久化 Cookie（Persistent Cookie） <ul><li>持久化 Cookie 是指带有过期时间（expires）或最大存活时间（max-age）的 Cookie，它会在指定时间后自动失效，即使关闭浏览器后也会保留到失效时间。</li></ul></li><li>安全属性 <ul><li>path：指定 Cookie 的作用路径。默认为当前路径。</li><li>domain：指定 Cookie 的作用域。默认为当前域名。</li><li>secure：指示 Cookie 只能通过 HTTPS 连接传输。</li><li>HttpOnly：指示 Cookie 只能在服务器端访问，JavaScript 无法读取。</li><li>SameSite：用于防止跨站请求伪造（CSRF）攻击。可选值为 Strict、Lax 和 None。</li></ul></li></ul></li><li>IndexedDB：一种更强大的数据库解决方案，适用于存储大容量结构化数据。</li><li>Service Workers Cache：用于缓存请求和响应，可以存储较大数据量。</li></ul><h2 id="web-安全" tabindex="-1">Web 安全 <a class="header-anchor" href="#web-安全" aria-label="Permalink to &quot;Web 安全&quot;">​</a></h2><ul><li>XSS（跨站脚本攻击）</li><li>CSRF（跨站请求伪造攻击）</li><li>SQL 注入</li></ul>`,67),e=[n];function h(p,k,r,d,E,o){return a(),s("div",null,e)}const y=i(l,[["render",h]]);export{c as __pageData,y as default};
