import{_ as a,c as s,o as i,a2 as e}from"./chunks/framework.aTtkxbT6.js";const u=JSON.parse('{"title":"Web 踩坑经验","description":"","frontmatter":{},"headers":[],"relativePath":"experience/web/index.md","filePath":"experience/web/index.md"}'),n={name:"experience/web/index.md"},t=e(`<h1 id="web-踩坑经验" tabindex="-1">Web 踩坑经验 <a class="header-anchor" href="#web-踩坑经验" aria-label="Permalink to &quot;Web 踩坑经验&quot;">​</a></h1><h2 id="文字偶现乱码" tabindex="-1">文字偶现乱码 <a class="header-anchor" href="#文字偶现乱码" aria-label="Permalink to &quot;文字偶现乱码&quot;">​</a></h2><p>现象：通过 css 属性 content 填充的文字，偶尔会显示成乱码。</p><p>解决：是将文字改为 unicode 编码，例如 content: &#39;展开&#39; 应改为 content: &#39;&#39;\\5c55\\5f00&#39;&#39;；</p><h2 id="符号-偶现不显示" tabindex="-1">符号”_“偶现不显示 <a class="header-anchor" href="#符号-偶现不显示" aria-label="Permalink to &quot;符号”_“偶现不显示&quot;">​</a></h2><p>现象：文字父容器设置了 overflow: hidden，在窗口缩放时，缩放到一定比例（不同显示器不一样）会发现&quot;_&quot;消看不见了。</p><p>原因：猜测可能是浏览器底层渲染时，对不足1px的内容发生了偏移导致，在特定屏幕特定缩放率下会导致”_“向下偏移了1个像素，加上父容器设置了 overflow: hidden，所及就看不见了。</p><p>解决：对文字增加样式 padding-bottom: 1px 即可解决此类问题，修改后怎么缩放都不会再消失。</p><h2 id="json-数字精度丢失" tabindex="-1">JSON 数字精度丢失 <a class="header-anchor" href="#json-数字精度丢失" aria-label="Permalink to &quot;JSON 数字精度丢失&quot;">​</a></h2><p>除了数值的 JS 代码使用大整形数值时，会发生精度丢失问题外。在 JSON 序列化外也会丢失精度。</p><p>所以，HTTP 传输时，若有大整形数字，必须要求后端以<code>字符串</code>的格式返回。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">258431607934229718</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// good</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;258431607934229718&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="display-inline-block" tabindex="-1">display:inline-block <a class="header-anchor" href="#display-inline-block" aria-label="Permalink to &quot;display:inline-block&quot;">​</a></h2><p>某些浏览器在渲染 display: inline-block; 元素的时候,默认元素的样式不一样，可能会造成该元素的上移或下移，可以尝试：</p><ul><li>设置line-height:1试试</li><li>或者在父级元素上使用display:flex</li></ul><h2 id="自动播放音频" tabindex="-1">自动播放音频 <a class="header-anchor" href="#自动播放音频" aria-label="Permalink to &quot;自动播放音频&quot;">​</a></h2><p>audio 标签，加个 autoplay 属性，这样写了并没有生效，而是报了个错：</p><blockquote><p>Auto play failed: DOMException: play() failed because the user didn&#39;t interact with the document first. <a href="https://goo.gl/xX8pDD" target="_blank" rel="noreferrer">https://goo.gl/xX8pDD</a></p></blockquote><p>解决方案是监听用户进来的第一次点击事件，触发播放按钮。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.playPause, { once: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div>`,20),l=[t];function p(h,o,d,r,k,c){return i(),s("div",null,l)}const g=a(n,[["render",p]]);export{u as __pageData,g as default};
